#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct  (Madagascar Script)
#
# Purpose: get CRE gather for several m0's and t0's. Save the CRS parameters obtained
# in the optimization step in order to get the radiusgram, anglegram and semblancegram.
#
# Site: http://www.dirackslounge.online
# 
# Version 1.0
#
# Programer: Rodolfo A. C. Neves (Dirack) 27/09/2019
#
# Email: rodolfo_profissional@hotmail.com
#
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.


# Madagascar library
from rsf.proj import *

# Python math library
import math

# Ploting functions
from graph_scons import *

v0 = 1.5
ot0 = 1.0
dt0 = 0.004
nt0 = 500
om0 = 3
dm0 = 0.0125
nm0 = 320

for i in range(251,321):

	parametersCube = []
	creGatherCube = []
	creTimeCurveCube = []
	creGatherCubeForM0List = []
	creTimeCurveCubeForM0List = []
	creGatherIndex = 0

	m0 = om0 + (i * dm0)

	for j in range(nt0):

		t0 = ot0 + (dt0 * j)

		crsParameters = 'crsParameters-m0-%g-t0-%g' % (i,j)
		creMhCoordinates = 'creMhCoordinates-m0-%g-t0-%g' % (i,j)
		creGather = 'creGather-m0-%g-t0-%g' % (i,j)
		creMcoordinate = 'creMcoordinate-m0-%g-t0-%g' % (i,j)
		creTimeCurve = 'creTimeCurve-m0-%g-t0-%g' % (i,j)
		creGatherPlot = 'crePlot-m0-%g-t0-%g' % (i,j)

		# Very Fast Simulated Aneelling Global Optimization (VFSA)
		Flow(crsParameters,'dataCube',
			'''
			vfsacrenh m0=%g v0=%g t0=%g verb=y repeat=3
			''' % (m0,v0,t0))

		# Calculate CRE trajectory
		Flow(creMhCoordinates,['interpolatedDataCube',crsParameters],
			'''
			cretrajec verb=y m0=%g param=${SOURCES[1]} |
			put unit1="Offset" label1="Km"
			''' % (m0))

		#Get CRE Gather from interpolated Data Cube
		Flow([creGather,creMcoordinate],['interpolatedDataCube',creMhCoordinates],
			'''
			getcregather verb=y cremh=${SOURCES[1]} m=${TARGETS[1]} |
                        put label1="Time" unit1="s" label2="Offset" unit2="km" 
			''')

		# Calculate CRE traveltime curve t(m,h)
		Flow(creTimeCurve,[creMcoordinate, crsParameters],
			'''
			getcretimecurve param=${SOURCES[1]} t0=%g m0=%g v0=%g verb=y |
                        put label1="Offset" unit1="Km" 
			''' % (t0,m0,v0))

		parametersCube.append(crsParameters)
		creGatherCube.append(creGather)
		creTimeCurveCube.append(creTimeCurve)
		creGatherIndex = creGatherIndex + 1

	# Concatenate cre gathers for each m0
	creGatherCubeForM0 = "creGatherCube-m0-%i" % i
	creGatherCubeForM0List.append(creGatherCubeForM0)
	Flow(creGatherCubeForM0,creGatherCube,
		'''
		rcat axis=3 ${SOURCES[1:%d]}
		''' % nt0)

	# Concatenate cre Time curves for each m0
	creTimeCurveCubeForM0 = "creTimeCurveCube-m0-%i" % i
	creTimeCurveCubeForM0List.append(creTimeCurveCubeForM0)
	Flow(creTimeCurveCubeForM0,creTimeCurveCube,
		'''
		rcat axis=2 ${SOURCES[1:%d]}
		'''% nt0)

	# Stack one m0 per turn
	creTimeCurveCube = []
	creGatherCube = []
	creGatherTrace = "creGatherTrace-m0-%i" % i
	creTimeCurveTrace = "creTimeCurveTrace-m0-%i" % i
	creStackedTrace = "creStackedTrace-m0-%i" % i

	# Get cre Gathers organized by t0 and m0
	Flow(creGatherTrace,creGatherCubeForM0List,
		'''
		put n4=1 d4=%g o4=%g d3=%g o3=%g label3=t0 unit3=s label4=m0 unit4=Km
		''' % (dm0,m0,dt0,ot0))

	# Get all the traveltime curves organized by t0 and m0
	Flow(creTimeCurveTrace,creTimeCurveCubeForM0List,
		'''
		put label3="m0" unit3="Km" label2="t0" unit2="s" d2=%g o2=%g d3=%g o3=%g
		''' % (dt0,ot0,dm0,m0))

	# CRE stacking
	Flow(creStackedTrace,[creGatherTrace,creTimeCurveTrace],
		'''
		crestack timeCurves=${SOURCES[1]} verb=y |
		put label1=t0 unit1=s label2=m0 unit2=Km --out=stdout
		''')

for i in range(85,90,1):
	time = 'creTimeCurve-m0-0-t0-%i' % i
	gather = 'creGather-m0-0-t0-%i' % i
	compare = 'compare-%i' % i

	Plot(time,'graph yreverse=y min2=0 max2=4 wanttitle=n wantlabel=n min1=0 max1=2')
	Plot(gather,'grey')
	Result(compare,[gather,time],'Overlay')

End()
