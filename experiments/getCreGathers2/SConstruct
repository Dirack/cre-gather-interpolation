#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct  (Madagascar Script)
#
# Purpose: get CRE gather for several m0's and t0's. Save the CRS parameters obtained
# in the optimization step in order to get the radiusgram, anglegram and semblancegram.
#
# Site: http://www.dirackslounge.online
# 
# Version 1.0
#
# Programer: Rodolfo A. C. Neves (Dirack) 27/09/2019
#
# Email: rodolfo_profissional@hotmail.com
#
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.


# Madagascar library
from rsf.proj import *

# Python math library
import math

# Ploting functions
from graph_scons import *

v0 = 1.5
ot0 = 1.2
dt0 = 0.01
nt0 = 2
om0 = 5
dm0 = 0.1
nm0 = 2

parametersCube = []
creGatherCube = []
creTimeCurveCube = []
creGatherIndex = 0

for i in range(nm0):

	m0 = om0 + (i * dm0)

	for j in range(nt0):

		t0 = ot0 + (dt0 * j)

		crsParameters = 'crsParameters-m0-%g-t0-%g' % (i,j)
		creMhCoordinates = 'creMhCoordinates-m0-%g-t0-%g' % (i,j)
		creGather = 'creGather-m0-%g-t0-%g' % (i,j)
		creMcoordinate = 'creMcoordinate-m0-%g-t0-%g' % (i,j)
		creTimeCurve = 'creTimeCurve-m0-%g-t0-%g' % (i,j)

		# Very Fast Simulated Aneelling Global Optimization (VFSA)
		Flow(crsParameters,'interpolatedDataCube',
			'''
			vfsacrenh m0=%g v0=%g t0=%g verb=y repeat=2
			''' % (m0,v0,t0))

		# Calculate CRE trajectory
		Flow(creMhCoordinates,['interpolatedDataCube',crsParameters],
			'''
			cretrajec verb=y m0=%g param=${SOURCES[1]} |
			put unit1="Offset" label1="Km"
			''' % (m0))

		#Get CRE Gather from interpolated Data Cube
		Flow([creGather,creMcoordinate],['interpolatedDataCube',creMhCoordinates],
			'''
			getcregather verb=y cremh=${SOURCES[1]} m=${TARGETS[1]}
			''')

		# Calculate CRE traveltime curve t(m,h)
		Flow(creTimeCurve,[creMcoordinate, crsParameters],
			'''
			getcretimecurve param=${SOURCES[1]} t0=%g m0=%g v0=%g verb=y
			''' % (t0,m0,v0))



		parametersCube.append(crsParameters)
		creGatherCube.append(creGather)
		creTimeCurveCube.append(creTimeCurve)
		creGatherIndex = creGatherIndex + 1

# Get a paramters cube RN, RNIP, BETA, SEMBLANCE
Flow('parametersCube',parametersCube,
	'''
	rcat axis=2 ${SOURCES[0:%d]}
	''' % (creGatherIndex-1))

# Get cre Gathers organized by t0 and m0
Flow('creGatherCube',creGatherCube,
	'''
	rcat axis=3 ${SOURCES[0:%d]} |
	put label2=Offset unit2=Km label1=Time unit1=s |
	put label3=t0 unit3=s o3=%g d3=%g n3=%i label4=m0 unit4=Km o4=%g d4=%g n4=%i
	''' % (creGatherIndex-1,ot0,dt0,nt0,om0,dm0,nm0))

# Get all the traveltime curves organized by t0 and m0
Flow('creTimeCurveCube',creTimeCurveCube,
	'''
	rcat axis=3 ${SOURCES[0:%d]} |
	put label2=Index label1=Time unit1=s |
	put label3=t0 unit3=s o3=%g d3=%g n3=%i label4=m0 unit4=Km o4=%g d4=%g n4=%i
	''' % (creGatherIndex-1,ot0,dt0,nt0,om0,dm0,nm0))

# CRE stacking
Flow('creStackedSection',['creGatherCube','creTimeCurveCube'],
	'''
	crestack timeCurves=${SOURCES[1]} verb=y |
	put label1=t0 unit1=s label2=m0 unit2=Km
	''')

End()
