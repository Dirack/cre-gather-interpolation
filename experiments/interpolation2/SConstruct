#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct  (Madagascar Script)
#
# Purpose: Interpolation of modeled data Cube to increase dara sampling.
#
# Site: http://www.dirackslounge.online
# 
# Version 1.0
#
# Programer: Rodolfo A. C. Neves (Dirack) 22/09/2019
#
# Email: rodolfo_profissional@hotmail.com
#
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.


# Madagascar library
from rsf.proj import *

# Python math library
import math

# Ploting functions
from graph_scons import *

# Build a mask to interleave zero traces with original data traces
Flow('aa',None,'spike n1=802 d1=0.00625 o1=0')
Flow('bb',None,'spike n1=802 d1=0.00625 o1=0 mag=0')
Flow('mask1','bb aa',
	'''
	interleave axis=1 ${SOURCES[1]} |
	dd type=int
	''')

Flow('a',None,'spike n1=802 d1=0.00625 o1=0')
Flow('b',None,'spike n1=802 d1=0.00625 o1=0 mag=0')
Flow('mask','a b',
	'''
	interleave axis=1 ${SOURCES[1]} |
	dd type=int
	''')
Flow('zeroTraceGather','b',
	'''
	spray axis=2 n=1001 d=0.00625 |
	transp |
	put label2=Offset unit2=Km label1=Time unit1=s
	''')

# Data Mask with double of traces in CMP (half of CMP sampling)
# Keep the same Time and Offset original data sampling
Flow('mask0','mask',
     '''
     spray axis=1 n=1001 d=0.004
     ''')

totalPefIterations = 100
totalInterpolationIterations = 20

offsetGathers = []
for offsetGatherIndex in range(160):

	offsetGather = "offsetGather-%i" % offsetGatherIndex
	resampledOffsetGather = "resampledOffsetGather-%i" % offsetGatherIndex
	interpolatedOffsetGather = "interpolatedOffsetGather-%i" % offsetGatherIndex
	pefCoeficients = "pefCoeficients-%i" % offsetGatherIndex

	Flow(offsetGather,'interpolatedDataCube',
	'''
	window n2=1 f2=%i
	''' % (offsetGatherIndex))
	
	Flow(resampledOffsetGather,[offsetGather,'zeroTraceGather'],
	'''
	interleave axis=2 ${SOURCES[1]}
	''')

	# Calculate adaptive PEF coeficients
	Flow(pefCoeficients,[resampledOffsetGather,'mask0'],
		'''
		apef jump=2 a=10,2 rect1=50 rect2=2 niter=%g verb=y
		maskin=${SOURCES[1]}
		''' % (totalPefIterations))

	# 4. Interpolation
	Flow(interpolatedOffsetGather, 	[resampledOffsetGather,pefCoeficients,'mask0','mask1'],
		'''
		miss4 filt=${SOURCES[1]} mask=${SOURCES[2]} niter=%g verb=y |
		put d2=0.00625
		''' % (totalInterpolationIterations))

	offsetGathers.append(interpolatedOffsetGather)

# Concatenate interpolated sections
Flow('interpolatedDataCube2',offsetGathers,
	'''
	rcat axis=3 ${SOURCES[0:%d]} |
	transp plane=23
	''' % offsetGatherIndex)



End()
